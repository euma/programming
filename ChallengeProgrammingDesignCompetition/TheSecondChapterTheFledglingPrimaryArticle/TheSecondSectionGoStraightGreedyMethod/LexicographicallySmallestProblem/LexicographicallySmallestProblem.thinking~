针对程序的学习我需要制定详细的可一步一步执行的学习方法

面对问题
1,先给出自己的分析，思路
给出解决问题的策略和工作思路
这个问题是ｐｏｊ３６１７问题，那么我可以在看着书中的问题，先解决了
然后我再去阅读ｐｏｊ上的这个问题，然后阅读其英文描述，解决问题，上传代码，测试成功！
再回来看书中的分析，把书中的分析写成代码
在看书中的源代码，并在测试中，弄清楚代码是如何运转的，
我现在测试代码都要详细打印其运转的中间过程，而不仅仅是读懂代码，我还要看到实实在在的执行过程，以及执行中数据的详细变化

具体步骤
１．看着书，把问题解决了
编了一大会，原来题目意思每看懂！
一种办法是打印出所有的可能，从中选择字典序最小的
Ｎ＝２０００
所有可能大概有２＾１０００＝(２＾３）^33~10^33
这个可能性太多，但是我觉得还是有必要在小数据下实现！
先把这个代码实现，在考虑其他！
我已经可以打印出所有可能,产生一个数组！
接下来就是找到最小的，
办法一，把ａｂｃ，变为１２３，ｂｃａ变为２３１，然后产生123,231,如果想减少数位，可以采用二进制！那个字符串产生的数字小，谁就是最小的.可以专门写一个函数来产生这个对应的数字！num("abc")=123
之后通过比较，找到最大值！
我使用的办法是利用系统自带的ｓｔｒｃｍｐ来计较
至于建立一个字符串组，然后在排序，或比较，这个我现在不想实现，因为我在方程内部通过ｓｔｒｃｍｐ已经比较成功了！


２．阅读ｐｏｊ中相应问题的描述，把英语关过了
在这一步我想到了，我可以通过比较ａｂｃ，与ｃｂａ哪个小，来决定是从头添加，还是从尾巴添加,所以先不阅读英文，而是直接写出这个想法下的代码！
想法实现了！
初步的想法和最终的想法还是有很大的变动的！

３．写程序，通过ｐｏｊ的测试
我的想法是先测试一下，我已经写好的代码能不能通过ｐｏｊ的测试，应该得到超时的结果！
我现在的思路是，肯定是选
４．看书中的分析，用自己的程序语言风格把书中的分析写成代码
书中的代码与我的思路是相同的！
其实我想证实一下，我写的第一个代码如果上传上去，就会得到超时的回应，
好现在就做！一有想法，就立刻去做！
５．看书中的代码，详细了解其运转过程！
2,由自己的思路出发写出程序, 
测试程序，清晰明白地弄懂每一个代码表达的意思！

3,看作者的思路

4,由作者的分析与思路出发，自己独立写出程序
测试程序，清晰明白地弄懂每一个代码表达的意思！

5,看作者的代码
在测试代码的过程中，理解代码想要表达的一切，完全弄懂作者的代码
能改进的地方立刻作出改进，如果不喜欢作者的代码表达，立刻以自己的风格写代码！


针对程序的学习我需要制定详细的可一步一步执行的学习方法
面对问题
1,先给出自己的分析，思路

定义一：
min通常被定义成这样的宏：
#define min(X,Y) ((X) < (Y) ? (X) : (Y))
定义二：
引用：#define min(X,Y)  /
(__extension__  /
({  /
   typeof(X) __x=(X), __y=(Y);   /
   (__x<__y)?__x:__y;  /
}) /
) 
定义三：
#define min(x, y) ((x) <? (y))
定义四：
template <class type>
type min(type a, type b)
{
     return a < b ? a : b;
}

另外在看看，ｃ语言自带的ｍｉｎ以及ｃｐｐ自带的ｍｉｎ

我只在这里探讨ｍｉｎ与ｍａｘ的实现
实际使用中我只选择一个而不是全部都用！

2,由自己的思路出发写出程序, 
测试程序，清晰明白地弄懂每一个代码表达的意思！

3,看作者的思路

4,由作者的分析与思路出发，自己独立写出程序
测试程序，清晰明白地弄懂每一个代码表达的意思！

5,看作者的代码
在测试代码的过程中，理解代码想要表达的一切，完全弄懂作者的代码
能改进的地方立刻作出改进，如果不喜欢作者的代码表达，立刻以自己的风格写代码！


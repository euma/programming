//这个程序侧重介绍浮点数运算，就是计算机上所能实现的实数运算。
//计算机上也可以实现有理数运算，但是那需要构造一个有理数的数据类型，并规定
//相应的计算函数！
#include<stdio.h>
int main() {
	printf("%.1f\n",8.0/5.0);//这里1的含义是只打印小数点后一位
	printf("%.2f\n",8.0/5.0);//这里2的含义是只打印小数点后两位
	printf("%f\n",8.0/5.0);//说明一个浮点数小数点后有六位
	//%f表示没有格式要求的打印浮点数！
	printf("%f\n",8/5);//程序没有返回1.000000,这是我设想的结果，因为
//因为先求得8/5,再把结果从整数转换为浮点数。
//这样从结果看，printf函数，不是8/5而是8.0/5.0,并且去掉了后面多余的零。这样的提前决定是好的，因为它给了你一个较准确的答案！
	printf("%d\n",8.0/5.0);//得到一个非常大的整数，该不会是该浮点数的二进制表示，直接转换为整数的那个数吧？可以验证一下，但不是现在！
	printf("%d\n",8/9);
	printf("%d\n",9/8);

	//增加以下测试的结论是：m/n，得到的都是1.600000
	printf("%f\n",8/9);
	printf("%f\n",9/8);
	printf("%f\n",19/8);
	printf("%f\n",-7/8);
	printf("%f\n",12/-9);
	printf("%f\n",-2/-9);
	//一个简单的解释是编译器不允许这样的事情，所以才给出相同的结果！
	printf("%f\n",(double)(8/9));
	printf("%f\n",(double)(9/8));
	printf("%f\n",(double)(19/8));
	printf("%f\n",(double)(-7/8));
	printf("%f\n",(double)(12/-9));
	printf("%f\n",(double)(-2/-9));


	return 0;
}
